// -----------------------------------------------------------------------------
// 'user_dpp' Register Definitions
// Revision: 93
// -----------------------------------------------------------------------------
// Generated by airhdl version 2023.07.1-936312266
// -----------------------------------------------------------------------------
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
// -----------------------------------------------------------------------------

#ifndef USER_DPP_REGS_H
#define USER_DPP_REGS_H

#include <string>
#include <cstdint>

namespace user_dpp_regs {

    static const std::string name = "user_dpp";

    /* Revision number of the 'user_dpp' register map */
    static const std::uint32_t REVISION = 93;

    /* Default base address of the 'user_dpp' register map */
    static const std::uint32_t BASE_ADDRESS = 0x88000000;

    /* Size of the 'user_dpp' register map, in bytes */
    static const std::uint32_t USER_DPP_RANGE_BYTES = 9984;

    /* Register 'User_FW_Rev' */
    static const std::uint32_t USER_FW_REV_OFFSET = 0x00000000; /* address offset of the 'User_FW_Rev' register */

    /* Field 'User_FW_Rev.value' */
    static const int USER_FW_REV_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int USER_FW_REV_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t USER_FW_REV_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t USER_FW_REV_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'Airhdl_Rev_Number' */
    static const std::uint32_t AIRHDL_REV_NUMBER_OFFSET = 0x00000004; /* address offset of the 'Airhdl_Rev_Number' register */

    /* Field 'Airhdl_Rev_Number.value' */
    static const int AIRHDL_REV_NUMBER_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int AIRHDL_REV_NUMBER_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t AIRHDL_REV_NUMBER_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t AIRHDL_REV_NUMBER_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'test_clk_x2' */
    static const std::uint32_t TEST_CLK_X2_OFFSET = 0x00000008; /* address offset of the 'test_clk_x2' register */

    /* Field 'test_clk_x2.value' */
    static const int TEST_CLK_X2_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int TEST_CLK_X2_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t TEST_CLK_X2_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t TEST_CLK_X2_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'test_clk_x3' */
    static const std::uint32_t TEST_CLK_X3_OFFSET = 0x0000000C; /* address offset of the 'test_clk_x3' register */

    /* Field 'test_clk_x3.value' */
    static const int TEST_CLK_X3_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int TEST_CLK_X3_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t TEST_CLK_X3_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t TEST_CLK_X3_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'test_clk_x4' */
    static const std::uint32_t TEST_CLK_X4_OFFSET = 0x00000010; /* address offset of the 'test_clk_x4' register */

    /* Field 'test_clk_x4.value' */
    static const int TEST_CLK_X4_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int TEST_CLK_X4_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t TEST_CLK_X4_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t TEST_CLK_X4_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'User_Generic_Settings' */
    static const std::uint32_t USER_GENERIC_SETTINGS_OFFSET = 0x00000014; /* address offset of the 'User_Generic_Settings' register */

    /* Field 'User_Generic_Settings.value' */
    static const int USER_GENERIC_SETTINGS_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int USER_GENERIC_SETTINGS_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t USER_GENERIC_SETTINGS_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t USER_GENERIC_SETTINGS_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'User_Ovth_En_Mask_31_0' */
    static const std::uint32_t USER_OVTH_EN_MASK_31_0_OFFSET = 0x00000018; /* address offset of the 'User_Ovth_En_Mask_31_0' register */

    /* Field 'User_Ovth_En_Mask_31_0.value' */
    static const int USER_OVTH_EN_MASK_31_0_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int USER_OVTH_EN_MASK_31_0_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t USER_OVTH_EN_MASK_31_0_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t USER_OVTH_EN_MASK_31_0_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'User_Ovth_En_Mask_63_32' */
    static const std::uint32_t USER_OVTH_EN_MASK_63_32_OFFSET = 0x0000001C; /* address offset of the 'User_Ovth_En_Mask_63_32' register */

    /* Field 'User_Ovth_En_Mask_63_32.value' */
    static const int USER_OVTH_EN_MASK_63_32_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int USER_OVTH_EN_MASK_63_32_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t USER_OVTH_EN_MASK_63_32_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t USER_OVTH_EN_MASK_63_32_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'Debug' */
    static const std::uint32_t DEBUG_OFFSET = 0x00000020; /* address offset of the 'Debug' register */

    /* Field 'Debug.value' */
    static const int DEBUG_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int DEBUG_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t DEBUG_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t DEBUG_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'user_ch_status' */
    static const std::uint32_t USER_CH_STATUS_OFFSET = 0x00000100; /* address offset of the 'user_ch_status' register */
    static const int USER_CH_STATUS_ARRAY_LENGTH = 64; /* length of the 'user_ch_status' register array, in elements */

    /* Field 'user_ch_status.value' */
    static const int USER_CH_STATUS_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int USER_CH_STATUS_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t USER_CH_STATUS_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t USER_CH_STATUS_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'TriggerCounts' */
    static const std::uint32_t TRIGGERCOUNTS_OFFSET = 0x00000200; /* address offset of the 'TriggerCounts' register */
    static const int TRIGGERCOUNTS_ARRAY_LENGTH = 64; /* length of the 'TriggerCounts' register array, in elements */

    /* Field 'TriggerCounts.value' */
    static const int TRIGGERCOUNTS_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int TRIGGERCOUNTS_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t TRIGGERCOUNTS_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t TRIGGERCOUNTS_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'TriggerRate' */
    static const std::uint32_t TRIGGERRATE_OFFSET = 0x00000300; /* address offset of the 'TriggerRate' register */
    static const int TRIGGERRATE_ARRAY_LENGTH = 64; /* length of the 'TriggerRate' register array, in elements */

    /* Field 'TriggerRate.value' */
    static const int TRIGGERRATE_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int TRIGGERRATE_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t TRIGGERRATE_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t TRIGGERRATE_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'OutputRate' */
    static const std::uint32_t OUTPUTRATE_OFFSET = 0x00000400; /* address offset of the 'OutputRate' register */
    static const int OUTPUTRATE_ARRAY_LENGTH = 64; /* length of the 'OutputRate' register array, in elements */

    /* Field 'OutputRate.value' */
    static const int OUTPUTRATE_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int OUTPUTRATE_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t OUTPUTRATE_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t OUTPUTRATE_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'Threshold' */
    static const std::uint32_t THRESHOLD_OFFSET = 0x00001200; /* address offset of the 'Threshold' register */
    static const int THRESHOLD_ARRAY_LENGTH = 64; /* length of the 'Threshold' register array, in elements */

    /* Field 'Threshold.value' */
    static const int THRESHOLD_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int THRESHOLD_VALUE_BIT_WIDTH = 16; /* bit width of the 'value' field */
    static const std::uint32_t THRESHOLD_VALUE_BIT_MASK = 0x0000FFFF; /* bit mask of the 'value' field */
    static const std::uint32_t THRESHOLD_VALUE_RESET = 0x8000; /* reset value of the 'value' field */

    /* Register 'Wave_Length' */
    static const std::uint32_t WAVE_LENGTH_OFFSET = 0x00001300; /* address offset of the 'Wave_Length' register */
    static const int WAVE_LENGTH_ARRAY_LENGTH = 64; /* length of the 'Wave_Length' register array, in elements */

    /* Field 'Wave_Length.value' */
    static const int WAVE_LENGTH_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int WAVE_LENGTH_VALUE_BIT_WIDTH = 12; /* bit width of the 'value' field */
    static const std::uint32_t WAVE_LENGTH_VALUE_BIT_MASK = 0x00000FFF; /* bit mask of the 'value' field */
    static const std::uint32_t WAVE_LENGTH_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'Pre_Trigger' */
    static const std::uint32_t PRE_TRIGGER_OFFSET = 0x00001400; /* address offset of the 'Pre_Trigger' register */
    static const int PRE_TRIGGER_ARRAY_LENGTH = 64; /* length of the 'Pre_Trigger' register array, in elements */

    /* Field 'Pre_Trigger.value' */
    static const int PRE_TRIGGER_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int PRE_TRIGGER_VALUE_BIT_WIDTH = 14; /* bit width of the 'value' field */
    static const std::uint32_t PRE_TRIGGER_VALUE_BIT_MASK = 0x00003FFF; /* bit mask of the 'value' field */
    static const std::uint32_t PRE_TRIGGER_VALUE_RESET = 0xA; /* reset value of the 'value' field */

    /* Register 'Qs_Length' */
    static const std::uint32_t QS_LENGTH_OFFSET = 0x00001500; /* address offset of the 'Qs_Length' register */
    static const int QS_LENGTH_ARRAY_LENGTH = 64; /* length of the 'Qs_Length' register array, in elements */

    /* Field 'Qs_Length.value' */
    static const int QS_LENGTH_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int QS_LENGTH_VALUE_BIT_WIDTH = 13; /* bit width of the 'value' field */
    static const std::uint32_t QS_LENGTH_VALUE_BIT_MASK = 0x00001FFF; /* bit mask of the 'value' field */
    static const std::uint32_t QS_LENGTH_VALUE_RESET = 0x10; /* reset value of the 'value' field */

    /* Register 'Ql_Length' */
    static const std::uint32_t QL_LENGTH_OFFSET = 0x00001600; /* address offset of the 'Ql_Length' register */
    static const int QL_LENGTH_ARRAY_LENGTH = 64; /* length of the 'Ql_Length' register array, in elements */

    /* Field 'Ql_Length.value' */
    static const int QL_LENGTH_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int QL_LENGTH_VALUE_BIT_WIDTH = 13; /* bit width of the 'value' field */
    static const std::uint32_t QL_LENGTH_VALUE_BIT_MASK = 0x00001FFF; /* bit mask of the 'value' field */
    static const std::uint32_t QL_LENGTH_VALUE_RESET = 0x30; /* reset value of the 'value' field */

    /* Register 'Channel_Trigger_Source' */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_OFFSET = 0x00001700; /* address offset of the 'Channel_Trigger_Source' register */
    static const int CHANNEL_TRIGGER_SOURCE_ARRAY_LENGTH = 64; /* length of the 'Channel_Trigger_Source' register array, in elements */

    /* Field 'Channel_Trigger_Source.Enable_Signal_Ovth' */
    static const int CHANNEL_TRIGGER_SOURCE_ENABLE_SIGNAL_OVTH_BIT_OFFSET = 0; /* bit offset of the 'Enable_Signal_Ovth' field */
    static const int CHANNEL_TRIGGER_SOURCE_ENABLE_SIGNAL_OVTH_BIT_WIDTH = 1; /* bit width of the 'Enable_Signal_Ovth' field */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_ENABLE_SIGNAL_OVTH_BIT_MASK = 0x00000001; /* bit mask of the 'Enable_Signal_Ovth' field */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_ENABLE_SIGNAL_OVTH_RESET = 0x1; /* reset value of the 'Enable_Signal_Ovth' field */

    /* Field 'Channel_Trigger_Source.Enable_Ext_Trigger' */
    static const int CHANNEL_TRIGGER_SOURCE_ENABLE_EXT_TRIGGER_BIT_OFFSET = 1; /* bit offset of the 'Enable_Ext_Trigger' field */
    static const int CHANNEL_TRIGGER_SOURCE_ENABLE_EXT_TRIGGER_BIT_WIDTH = 1; /* bit width of the 'Enable_Ext_Trigger' field */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_ENABLE_EXT_TRIGGER_BIT_MASK = 0x00000002; /* bit mask of the 'Enable_Ext_Trigger' field */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_ENABLE_EXT_TRIGGER_RESET = 0x0; /* reset value of the 'Enable_Ext_Trigger' field */

    /* Field 'Channel_Trigger_Source.Enable_User_Int_Trigger' */
    static const int CHANNEL_TRIGGER_SOURCE_ENABLE_USER_INT_TRIGGER_BIT_OFFSET = 2; /* bit offset of the 'Enable_User_Int_Trigger' field */
    static const int CHANNEL_TRIGGER_SOURCE_ENABLE_USER_INT_TRIGGER_BIT_WIDTH = 1; /* bit width of the 'Enable_User_Int_Trigger' field */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_ENABLE_USER_INT_TRIGGER_BIT_MASK = 0x00000004; /* bit mask of the 'Enable_User_Int_Trigger' field */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_ENABLE_USER_INT_TRIGGER_RESET = 0x0; /* reset value of the 'Enable_User_Int_Trigger' field */

    /* Field 'Channel_Trigger_Source.Enable_Glob_Trigger' */
    static const int CHANNEL_TRIGGER_SOURCE_ENABLE_GLOB_TRIGGER_BIT_OFFSET = 3; /* bit offset of the 'Enable_Glob_Trigger' field */
    static const int CHANNEL_TRIGGER_SOURCE_ENABLE_GLOB_TRIGGER_BIT_WIDTH = 1; /* bit width of the 'Enable_Glob_Trigger' field */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_ENABLE_GLOB_TRIGGER_BIT_MASK = 0x00000008; /* bit mask of the 'Enable_Glob_Trigger' field */
    static const std::uint32_t CHANNEL_TRIGGER_SOURCE_ENABLE_GLOB_TRIGGER_RESET = 0x0; /* reset value of the 'Enable_Glob_Trigger' field */

    /* Register 'XIAFL' */
    static const std::uint32_t XIAFL_OFFSET = 0x00001800; /* address offset of the 'XIAFL' register */
    static const int XIAFL_ARRAY_LENGTH = 64; /* length of the 'XIAFL' register array, in elements */

    /* Field 'XIAFL.value' */
    static const int XIAFL_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int XIAFL_VALUE_BIT_WIDTH = 7; /* bit width of the 'value' field */
    static const std::uint32_t XIAFL_VALUE_BIT_MASK = 0x0000007F; /* bit mask of the 'value' field */
    static const std::uint32_t XIAFL_VALUE_RESET = 0xA; /* reset value of the 'value' field */

    /* Register 'XIAFLFG' */
    static const std::uint32_t XIAFLFG_OFFSET = 0x00001900; /* address offset of the 'XIAFLFG' register */
    static const int XIAFLFG_ARRAY_LENGTH = 64; /* length of the 'XIAFLFG' register array, in elements */

    /* Field 'XIAFLFG.value' */
    static const int XIAFLFG_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int XIAFLFG_VALUE_BIT_WIDTH = 7; /* bit width of the 'value' field */
    static const std::uint32_t XIAFLFG_VALUE_BIT_MASK = 0x0000007F; /* bit mask of the 'value' field */
    static const std::uint32_t XIAFLFG_VALUE_RESET = 0xA; /* reset value of the 'value' field */

    /* Register 'outputformat' */
    static const std::uint32_t OUTPUTFORMAT_OFFSET = 0x00001A00; /* address offset of the 'outputformat' register */
    static const int OUTPUTFORMAT_ARRAY_LENGTH = 64; /* length of the 'outputformat' register array, in elements */

    /* Field 'outputformat.value' */
    static const int OUTPUTFORMAT_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int OUTPUTFORMAT_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t OUTPUTFORMAT_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t OUTPUTFORMAT_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'Q_Offset' */
    static const std::uint32_t Q_OFFSET_OFFSET = 0x00001B00; /* address offset of the 'Q_Offset' register */
    static const int Q_OFFSET_ARRAY_LENGTH = 64; /* length of the 'Q_Offset' register array, in elements */

    /* Field 'Q_Offset.value' */
    static const int Q_OFFSET_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int Q_OFFSET_VALUE_BIT_WIDTH = 8; /* bit width of the 'value' field */
    static const std::uint32_t Q_OFFSET_VALUE_BIT_MASK = 0x000000FF; /* bit mask of the 'value' field */
    static const std::uint32_t Q_OFFSET_VALUE_RESET = 0xA; /* reset value of the 'value' field */

    /* Register 'BL_2nLength' */
    static const std::uint32_t BL_2NLENGTH_OFFSET = 0x00001C00; /* address offset of the 'BL_2nLength' register */
    static const int BL_2NLENGTH_ARRAY_LENGTH = 64; /* length of the 'BL_2nLength' register array, in elements */

    /* Field 'BL_2nLength.value' */
    static const int BL_2NLENGTH_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int BL_2NLENGTH_VALUE_BIT_WIDTH = 4; /* bit width of the 'value' field */
    static const std::uint32_t BL_2NLENGTH_VALUE_BIT_MASK = 0x0000000F; /* bit mask of the 'value' field */
    static const std::uint32_t BL_2NLENGTH_VALUE_RESET = 0x5; /* reset value of the 'value' field */

    /* Register 'BL_HOLD' */
    static const std::uint32_t BL_HOLD_OFFSET = 0x00001D00; /* address offset of the 'BL_HOLD' register */
    static const int BL_HOLD_ARRAY_LENGTH = 64; /* length of the 'BL_HOLD' register array, in elements */

    /* Field 'BL_HOLD.value' */
    static const int BL_HOLD_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int BL_HOLD_VALUE_BIT_WIDTH = 16; /* bit width of the 'value' field */
    static const std::uint32_t BL_HOLD_VALUE_BIT_MASK = 0x0000FFFF; /* bit mask of the 'value' field */
    static const std::uint32_t BL_HOLD_VALUE_RESET = 0x200; /* reset value of the 'value' field */

    /* Register 'RT_Offset' */
    static const std::uint32_t RT_OFFSET_OFFSET = 0x00001E00; /* address offset of the 'RT_Offset' register */
    static const int RT_OFFSET_ARRAY_LENGTH = 64; /* length of the 'RT_Offset' register array, in elements */

    /* Field 'RT_Offset.value' */
    static const int RT_OFFSET_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int RT_OFFSET_VALUE_BIT_WIDTH = 10; /* bit width of the 'value' field */
    static const std::uint32_t RT_OFFSET_VALUE_BIT_MASK = 0x000003FF; /* bit mask of the 'value' field */
    static const std::uint32_t RT_OFFSET_VALUE_RESET = 0x10; /* reset value of the 'value' field */

    /* Register 'RT_Gate' */
    static const std::uint32_t RT_GATE_OFFSET = 0x00001F00; /* address offset of the 'RT_Gate' register */
    static const int RT_GATE_ARRAY_LENGTH = 64; /* length of the 'RT_Gate' register array, in elements */

    /* Field 'RT_Gate.value' */
    static const int RT_GATE_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int RT_GATE_VALUE_BIT_WIDTH = 10; /* bit width of the 'value' field */
    static const std::uint32_t RT_GATE_VALUE_BIT_MASK = 0x000003FF; /* bit mask of the 'value' field */
    static const std::uint32_t RT_GATE_VALUE_RESET = 0x40; /* reset value of the 'value' field */

    /* Register 'XIAOFFSET' */
    static const std::uint32_t XIAOFFSET_OFFSET = 0x00002000; /* address offset of the 'XIAOFFSET' register */
    static const int XIAOFFSET_ARRAY_LENGTH = 64; /* length of the 'XIAOFFSET' register array, in elements */

    /* Field 'XIAOFFSET.value' */
    static const int XIAOFFSET_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int XIAOFFSET_VALUE_BIT_WIDTH = 10; /* bit width of the 'value' field */
    static const std::uint32_t XIAOFFSET_VALUE_BIT_MASK = 0x000003FF; /* bit mask of the 'value' field */
    static const std::uint32_t XIAOFFSET_VALUE_RESET = 0x40; /* reset value of the 'value' field */

    /* Register 'XIASL' */
    static const std::uint32_t XIASL_OFFSET = 0x00002100; /* address offset of the 'XIASL' register */
    static const int XIASL_ARRAY_LENGTH = 64; /* length of the 'XIASL' register array, in elements */

    /* Field 'XIASL.value' */
    static const int XIASL_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int XIASL_VALUE_BIT_WIDTH = 10; /* bit width of the 'value' field */
    static const std::uint32_t XIASL_VALUE_BIT_MASK = 0x000003FF; /* bit mask of the 'value' field */
    static const std::uint32_t XIASL_VALUE_RESET = 0x40; /* reset value of the 'value' field */

    /* Register 'XIASG' */
    static const std::uint32_t XIASG_OFFSET = 0x00002200; /* address offset of the 'XIASG' register */
    static const int XIASG_ARRAY_LENGTH = 64; /* length of the 'XIASG' register array, in elements */

    /* Field 'XIASG.value' */
    static const int XIASG_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int XIASG_VALUE_BIT_WIDTH = 10; /* bit width of the 'value' field */
    static const std::uint32_t XIASG_VALUE_BIT_MASK = 0x000003FF; /* bit mask of the 'value' field */
    static const std::uint32_t XIASG_VALUE_RESET = 0xA; /* reset value of the 'value' field */

    /* Register 'ValidTriggerDelay' */
    static const std::uint32_t VALIDTRIGGERDELAY_OFFSET = 0x00002300; /* address offset of the 'ValidTriggerDelay' register */
    static const int VALIDTRIGGERDELAY_ARRAY_LENGTH = 64; /* length of the 'ValidTriggerDelay' register array, in elements */

    /* Field 'ValidTriggerDelay.value' */
    static const int VALIDTRIGGERDELAY_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int VALIDTRIGGERDELAY_VALUE_BIT_WIDTH = 10; /* bit width of the 'value' field */
    static const std::uint32_t VALIDTRIGGERDELAY_VALUE_BIT_MASK = 0x000003FF; /* bit mask of the 'value' field */
    static const std::uint32_t VALIDTRIGGERDELAY_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'Polarity' */
    static const std::uint32_t POLARITY_OFFSET = 0x00002400; /* address offset of the 'Polarity' register */
    static const int POLARITY_ARRAY_LENGTH = 64; /* length of the 'Polarity' register array, in elements */

    /* Field 'Polarity.value' */
    static const int POLARITY_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int POLARITY_VALUE_BIT_WIDTH = 1; /* bit width of the 'value' field */
    static const std::uint32_t POLARITY_VALUE_BIT_MASK = 0x00000001; /* bit mask of the 'value' field */
    static const std::uint32_t POLARITY_VALUE_RESET = 0x1; /* reset value of the 'value' field */

    /* Register 'Q_Gain' */
    static const std::uint32_t Q_GAIN_OFFSET = 0x00002500; /* address offset of the 'Q_Gain' register */
    static const int Q_GAIN_ARRAY_LENGTH = 64; /* length of the 'Q_Gain' register array, in elements */

    /* Field 'Q_Gain.value' */
    static const int Q_GAIN_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int Q_GAIN_VALUE_BIT_WIDTH = 3; /* bit width of the 'value' field */
    static const std::uint32_t Q_GAIN_VALUE_BIT_MASK = 0x00000007; /* bit mask of the 'value' field */
    static const std::uint32_t Q_GAIN_VALUE_RESET = 0x0; /* reset value of the 'value' field */

    /* Register 'TAU' */
    static const std::uint32_t TAU_OFFSET = 0x00002600; /* address offset of the 'TAU' register */
    static const int TAU_ARRAY_LENGTH = 64; /* length of the 'TAU' register array, in elements */

    /* Field 'TAU.value' */
    static const int TAU_VALUE_BIT_OFFSET = 0; /* bit offset of the 'value' field */
    static const int TAU_VALUE_BIT_WIDTH = 32; /* bit width of the 'value' field */
    static const std::uint32_t TAU_VALUE_BIT_MASK = 0xFFFFFFFF; /* bit mask of the 'value' field */
    static const std::uint32_t TAU_VALUE_RESET = 0x0; /* reset value of the 'value' field */

}

#endif  /* USER_DPP_REGS_H */
